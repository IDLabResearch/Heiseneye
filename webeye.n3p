% --------------------
% Webeye -- Jos De Roo
% --------------------
%
% See idlabresearch.github.io/Webeye/
%

'idlabresearch.github.io/ns#builtin'(use_module(library(lists)),true).
'idlabresearch.github.io/ns#builtin'(use_module(library(terms)),true).
'idlabresearch.github.io/ns#builtin'(use_module(library(iso_ext)),true).

'idlabresearch.github.io/ns#builtin'(dynamic((=>)/2),true).
'idlabresearch.github.io/ns#builtin'(dynamic((<=)/2),true).
'idlabresearch.github.io/ns#builtin'(dynamic('idlabresearch.github.io/ns#brake'/2),true).
'idlabresearch.github.io/ns#builtin'(dynamic('idlabresearch.github.io/ns#label'/2),true).
'idlabresearch.github.io/ns#builtin'(dynamic('idlabresearch.github.io/ns#pred'/2),true).
'idlabresearch.github.io/ns#builtin'(dynamic('idlabresearch.github.io/ns#answer'/2),true).
'idlabresearch.github.io/ns#builtin'(dynamic('idlabresearch.github.io/ns#proof_step'/2),true).

%
% run Webeye abstract machine with a list of options:
%   - single_answer: output only one answer
%   - proof_step: output proof steps
%
% 1/ select rule P => C
% 2/ prove P and if it fails backtrack to 1/
% 3/ if C = true answer with P => true and if single_answer stop, else backtrack to 2/
%    else if ~C assert C, retract brake and backtrack to 2/
%    else backtrack to 2/
% 4/ if brake halt, else assert brake and start again at 1/
%
'idlabresearch.github.io/ns#main'(Options,true) <=
    'idlabresearch.github.io/ns#builtin'(call((Prem => Conc)),true),
    'idlabresearch.github.io/ns#builtin'(copy_term((Prem => Conc),Rule),true),
    'idlabresearch.github.io/ns#labelvars'(Rule,true),
    'idlabresearch.github.io/ns#builtin'(call(Prem),true),
    'idlabresearch.github.io/ns#options'(Options,[Prem,Conc,Rule]).
'idlabresearch.github.io/ns#main'(_,_) <=
    'idlabresearch.github.io/ns#brake'(true,true),
    'idlabresearch.github.io/ns#builtin'(halt,true).
'idlabresearch.github.io/ns#main'(Options,true) <=
    'idlabresearch.github.io/ns#builtin'(asserta('idlabresearch.github.io/ns#brake'(true,true)),true),
    'idlabresearch.github.io/ns#main'(Options,true).

'idlabresearch.github.io/ns#options'(Options,[Prem,true,_]) <=
    'idlabresearch.github.io/ns#labelvars'(Prem,true),
    'idlabresearch.github.io/ns#write_answer'(Prem,true),
    'idlabresearch.github.io/ns#builtin'(member(single_answer,Options),true).
'idlabresearch.github.io/ns#options'(Options,[Prem,Conc,Rule]) <=
    'idlabresearch.github.io/ns#builtin'(\+Conc,true),
    'idlabresearch.github.io/ns#labelvars'(Conc,true),
    'idlabresearch.github.io/ns#astep'(Prem,Conc),
    'idlabresearch.github.io/ns#write_proof_step'(Options,[Prem,Conc,Rule]),
    'idlabresearch.github.io/ns#builtin'(retract('idlabresearch.github.io/ns#brake'(true,true)),true),
    'idlabresearch.github.io/ns#builtin'(fail,true).

'idlabresearch.github.io/ns#write_answer'(Prem,true) <=
    'idlabresearch.github.io/ns#builtin'(\+'idlabresearch.github.io/ns#answer'((Prem => true),true),true),
    'idlabresearch.github.io/ns#builtin'(assertz('idlabresearch.github.io/ns#answer'((Prem => true),true)),true),
    'idlabresearch.github.io/ns#builtin'(writeq(Prem),true),
    'idlabresearch.github.io/ns#builtin'(write(' => true.\n'),true).
'idlabresearch.github.io/ns#write_answer'(_,true).

'idlabresearch.github.io/ns#write_proof_step'(Options,[Prem,Conc,Rule]) <=
    'idlabresearch.github.io/ns#builtin'(member(proof_step,Options),true),
    'idlabresearch.github.io/ns#builtin'(\+'idlabresearch.github.io/ns#proof_step'((Prem => Conc),true),true),
    'idlabresearch.github.io/ns#builtin'(assertz('idlabresearch.github.io/ns#proof_step'((Prem => Conc),true)),true),
    'idlabresearch.github.io/ns#builtin'(writeq('idlabresearch.github.io/ns#proof_step'(Rule,(Prem => Conc))),true),
    'idlabresearch.github.io/ns#builtin'(write('.\n'),true).
'idlabresearch.github.io/ns#write_proof_step'(_,[_,_,_]).

% create witnesses
'idlabresearch.github.io/ns#labelvars'(Term,true) <=
    'idlabresearch.github.io/ns#builtin'(retract('idlabresearch.github.io/ns#label'(Current,true)),true),
    'idlabresearch.github.io/ns#builtin'(!,true),
    'idlabresearch.github.io/ns#builtin'(numbervars(Term,Current,Next),true),
    'idlabresearch.github.io/ns#builtin'(assertz('idlabresearch.github.io/ns#label'(Next,true)),true).
'idlabresearch.github.io/ns#labelvars'(Term,true) <=
    'idlabresearch.github.io/ns#builtin'(numbervars(Term,0,Next),true),
    'idlabresearch.github.io/ns#builtin'(assertz('idlabresearch.github.io/ns#label'(Next,true)),true).

% assert new step
'idlabresearch.github.io/ns#astep'(A,(B,C)) <=
    'idlabresearch.github.io/ns#astep'(A,B),
    'idlabresearch.github.io/ns#astep'(A,C).
'idlabresearch.github.io/ns#astep'(A,false) <=
    'idlabresearch.github.io/ns#builtin'(writeq(A),true),
    'idlabresearch.github.io/ns#builtin'(write(' => false.\n'),true),
    'idlabresearch.github.io/ns#builtin'(halt,true).
'idlabresearch.github.io/ns#astep'(_,A) <=
    'idlabresearch.github.io/ns#builtin'(\+A,true),
    'idlabresearch.github.io/ns#builtin'(asserta(A),true),
    'idlabresearch.github.io/ns#apred'(A,true).
'idlabresearch.github.io/ns#astep'(_,_).

'idlabresearch.github.io/ns#apred'(A,true) <=
    'idlabresearch.github.io/ns#builtin'(functor(A,B,2),true),
    'idlabresearch.github.io/ns#builtin'(\+'idlabresearch.github.io/ns#pred'(B,true),true),
    'idlabresearch.github.io/ns#builtin'(assertz('idlabresearch.github.io/ns#pred'(B,true)),true).
'idlabresearch.github.io/ns#apred'(_,true).

%
% built-ins
%
'idlabresearch.github.io/ns#pso_triple'([P,S,O],Triple) <=
    'idlabresearch.github.io/ns#builtin'(var(P),true),
    'idlabresearch.github.io/ns#builtin'(!,true),
    'idlabresearch.github.io/ns#pred'(P,true),
    'idlabresearch.github.io/ns#builtin'(Triple =.. [P,S,O],true).
'idlabresearch.github.io/ns#pso_triple'([P,S,O],Triple) <=
    'idlabresearch.github.io/ns#builtin'(Triple =.. [P,S,O],true).
